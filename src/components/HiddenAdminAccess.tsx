import React, { useState, useEffect, createContext, useContext } from 'react';
import { useNavigate } from 'react-router-dom';

// –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ
const AdminAccessContext = createContext<{
  handleLogoPress: () => void;
} | null>(null);

export const useAdminAccess = () => {
  const context = useContext(AdminAccessContext);
  if (!context) {
    throw new Error('useAdminAccess must be used within HiddenAdminAccess');
  }
  return context;
};

interface HiddenAdminAccessProps {
  children: React.ReactNode;
}

export const HiddenAdminAccess: React.FC<HiddenAdminAccessProps> = ({ children }) => {
  const [showAccess, setShowAccess] = useState(false);
  const [logoPressCount, setLogoPressCount] = useState(0);
  const navigate = useNavigate();

  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é Ctrl + Shift + A
      if (event.ctrlKey && event.shiftKey && event.code === 'KeyA') {
        event.preventDefault();
        setShowAccess(true);
        setTimeout(() => setShowAccess(false), 5000); // –°–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, []);

  const handleAdminAccess = () => {
    navigate('/admin');
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ –ª–æ–≥–æ—Ç–∏–ø
  const handleLogoPress = () => {
    setLogoPressCount(prev => {
      const newCount = prev + 1;
      if (newCount >= 5) {
        setShowAccess(true);
        setTimeout(() => setShowAccess(false), 5000);
        return 0; // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞
      }
      // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => setLogoPressCount(0), 3000);
      return newCount;
    });
  };

  return (
    <AdminAccessContext.Provider value={{ handleLogoPress }}>
      {children}
      {showAccess && (
        <div className="fixed top-4 right-4 z-50">
          <button
            onClick={handleAdminAccess}
            className="bg-black hover:bg-gray-800 text-white px-4 py-2 rounded-lg shadow-lg transition-colors text-sm font-medium"
          >
            üîê Admin Access
          </button>
        </div>
      )}
    </AdminAccessContext.Provider>
  );
};
